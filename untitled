
Imp ques

Why to use Java?
JRE / JDK / JVM?
object / class?
compile and execute a Java program?
root class from which every class extends?
methods of the Object class?
primitive data types in Java?
default values for all data types in Java?
difference between String , StringBuilder , and StringBuffer ?
annotations?
Where are Strings stored?
stack vs heap?
POJO clas , bean class?
garbage collection in Java?
difference between == and .equals() 
Why are strings immutable in Java
access and non-access modifiers in Java?
difference between static and final variables?
What data types are supported in switch statements?
How to pass multiple values with a single parameter into a method?
What is the first line of constructor?
wrapper class?
autoboxing / unboxing?
enhanced for loop and what is a forEach loop?
How would you make an immutable object?
What is static block?
use of super keyword?
pass-by-value or pass-by-reference in java
the 4 pillars of OOP? Explain each one.
access modifiers in Java? Explain them.
difference between method overloading and overriding?
Difference between extends and implements?
difference between an abstract class and an interface?
implicit modifiers for interface variables / methods?
Can you overload / override the following 
main method
static method
private method
a default method
protected method?
What is a Marker interface?
What are transient variables?
ollections in Java?
interfaces in the Collections API?
difference between a Set and a List ?
difference between a Array and an ArrayList ?
What are generics? What is the diamond operator ( <> )?
difference between HashTable and HashMap?
difference between ArrayList and Vector ?
difference between ArrayList and LinkedList ?
difference between TreeSet and HashSet ?
How would you iterate over a Map ?
Which collections cannot hold null values?
What is base class of all exceptions? What interface do they all implement?
List some checked and unchecked exceptions?
Difference between checked and unchecked exceptions?
different ways of handling checked exceptions?
What is try-with-resources? What interface must the resource implement to use this feature?
What is the difference between final , .finalize() , and finally ?
throw vs throws vs Throwable ?
Do you need a catch block? Can have more than 1? Order of them?
Multi-catch block - can you catch more than one exception in a single catch block?
functional interfaces?
lambdas in java?
What is the Streams API ?
difference between intermediate and terminal operations in Streams API?
has context menu
Difference between final finally and finalize?



Why use Java?
Java is a widely-used programming language known for its platform independence, strong community support, extensive libraries, and robust security features.

JRE / JDK / JVM?

JRE (Java Runtime Environment): It includes the Java Virtual Machine (JVM), libraries, and other components required to run Java applications.
JDK (Java Development Kit): It includes the JRE, compiler, debugger, and other tools needed for Java development.
JVM (Java Virtual Machine): It executes Java bytecode and provides a runtime environment for Java applications.
Object / Class?

Object: An instance of a class. It has state and behavior.
Class: A blueprint for creating objects. It defines the properties and behaviors of objects.
Compile and execute a Java program?

Compile: Use the javac command to compile the .java source file into bytecode (.class file).
Execute: Use the java command followed by the class name (without the .class extension) to execute the bytecode.
Root class from which every class extends?
The Object class is the root class in Java from which every class implicitly extends.

Methods of the Object class?
Methods such as toString(), equals(Object obj), hashCode(), getClass(), clone(), finalize(), and wait() are provided by the Object class.

Primitive data types in Java?
Java has eight primitive data types: byte, short, int, long, float, double, char, and boolean.

Default values for all data types in Java?
Default values are 0 for numeric types, false for boolean, '\u0000' for char, and null for reference types.

Difference between String, StringBuilder, and StringBuffer?

String: Immutable sequence of characters.
StringBuilder: Mutable sequence of characters, not thread-safe.
StringBuffer: Mutable sequence of characters, thread-safe.
Annotations?
Annotations provide metadata about the program. They can be used by the compiler or at runtime for various purposes such as documentation, code analysis, and runtime processing.

Where are Strings stored?
Strings are stored in the String Pool, a special area in the Java Heap memory.

Stack vs Heap?

Stack: Used for method execution and storing method call frames. Memory is allocated and deallocated automatically.
Heap: Used for dynamic memory allocation. Objects are stored here, and memory management is done manually.
POJO class, bean class?
POJO (Plain Old Java Object) class:

A simple Java class that encapsulates data and provides getter and setter methods for accessing and modifying that data.
It does not have any special annotations or inheritance requirements.
It is often used to represent data in a straightforward manner, without any additional functionality or constraints.
Bean class:

A Java class that follows the JavaBeans conventions, which specify a standard for designing reusable software components.
Bean classes typically have private fields, public getter and setter methods, a public no-argument constructor, and may implement the Serializable interface.
They are commonly used in frameworks like Java EE for representing data and managing state.
Garbage collection in Java?
Garbage collection is the process by which Java automatically reclaims memory occupied by objects that are no longer in use. It helps manage memory efficiently and prevents memory leaks.

Difference between == and .equals()?

== compares object references for equality (i.e., whether they refer to the same object in memory).
.equals() is a method used to compare the contents of objects for equality (i.e., whether they have the same values).
Why are strings immutable in Java?
String immutability ensures thread safety, enhances security (e.g., in hashing), and enables string pooling, which reduces memory usage.

Access and non-access modifiers in Java?
Access modifiers control the accessibility of classes, fields, methods, and constructors. Non-access modifiers provide additional functionality or behavior to classes, fields, methods, and constructors.

Difference between static and final variables?

Static variables belong to the class, while instance variables belong to individual objects.
Final variables cannot be reassigned once initialized, while static variables can be reassigned.
What data types are supported in switch statements?
Switch statements in Java support int, byte, short, char, String (since Java 7), and enum types.

How to pass multiple values with a single parameter into a method?
You can pass multiple values using arrays, varargs (variable arguments), or collections (e.g., List).

What is the first line of a constructor?
The first line of a constructor is either an explicit call to another constructor using this() or an implicit call to the superclass constructor using super().

Wrapper class?
Wrapper classes are classes that encapsulate primitive data types. They provide utility methods and enable primitive types to be used as objects.

Autoboxing / Unboxing?
Autoboxing is the automatic conversion of primitive types to their corresponding wrapper types, while unboxing is the automatic conversion of wrapper types to their corresponding primitive types.

Enhanced for loop and what is a forEach loop?
The enhanced for loop (or foreach loop) is a concise way of iterating over arrays and collections in Java. It simplifies the syntax for iterating without using explicit index-based loops.

How would you make an immutable object?
To make an object immutable, ensure that its state cannot be changed after instantiation. Use private fields, avoid providing setter methods, and make defensive copies of mutable fields.

What is a static block?
A static block is a block of code enclosed in {} preceded by the static keyword. It is executed when the class is loaded into memory and is primarily used for static initialization.

Use of the super keyword?
The super keyword is used to refer to the superclass or parent class of a subclass. It can be used to access superclass methods, constructors, and fields.

Pass-by-value or pass-by-reference in Java?
Java uses pass-by-value for method arguments, meaning a copy of the variable's value is passed to the method. However, when passing objects, the reference to the object is passed by value.

The 4 pillars of OOP? Explain each one.
The four pillars of object-oriented programming are:

Encapsulation: Bundling data and methods that operate on the data into a single unit (class).
Inheritance: Mechanism for creating new classes based on existing classes (parent-child relationship).
Polymorphism: Ability to present the same interface for different data types or objects.
Abstraction: Process of hiding the implementation details and showing only the essential features of an object.
Access modifiers in Java? Explain them.
Access modifiers control the accessibility of classes, methods, and fields. The main access modifiers in Java are:

public: Accessible from anywhere.
protected: Accessible within the same package or by subclasses (even if they are in different packages).
default (no modifier): Accessible within the same package.
private: Accessible only within the same class.
Difference between method overloading and overriding?

Method overloading: Defining multiple methods in the same class with the same name but different parameters.
Method overriding: Redefining a method in a subclass with the same name, return type, and parameters as a method in the superclass.

Difference between extends and implements?

extends: Used to establish an inheritance relationship between classes. A subclass extends a superclass, inheriting its properties and behaviors.
implements: Used to indicate that a class implements one or more interfaces. It allows a class to provide specific implementations for the methods defined in the interface(s).
Difference between an abstract class and an interface?

Abstract class: Can contain both abstract and concrete methods. It may have instance variables. It cannot be instantiated. It can have constructors. It is used to provide a common base for subclasses to extend.
Interface: Contains only abstract methods and constants. It cannot have instance variables. It cannot be instantiated. It can be implemented by classes to define common behavior.
Implicit modifiers for interface variables / methods?

Interface variables are implicitly public, static, and final.
Interface methods are implicitly public and abstract.
Can you overload / override the following:

main method: Yes, you can overload the main method, but only the public static void main(String[] args) method is recognized as the entry point by the JVM.
Static method: Yes, static methods can be overloaded but not overridden.
Private method: No, private methods cannot be overridden or accessed outside the class they are defined in.
Default method: Yes, default methods can be overloaded but not overridden.
Protected method: Yes, protected methods can be overloaded but not overridden by subclasses outside the package.
What is a Marker interface?
A Marker interface is an interface with no methods. It is used to mark classes that belong to a certain category or group. Examples include Serializable, Cloneable, etc.

What are transient variables?
Transient variables are variables that are not serialized when an object is converted into a byte stream. They are marked with the transient keyword.

Collections in Java?
Collections in Java are data structures provided by the Java Collections Framework (JCF) to store and manipulate groups of objects. Examples include List, Set, Map, etc.

Interfaces in the Collections API?
Interfaces in the Collections API define various collection types and operations. Some key interfaces include List, Set, Map, Queue, and their respective implementations.

Difference between a Set and a List?

Set: Collection that does not allow duplicate elements. It is unordered.
List: Collection that allows duplicate elements and maintains insertion order.
Difference between an Array and an ArrayList?

Array: Fixed-size data structure containing elements of the same type. Size must be specified at the time of declaration.
ArrayList: Resizable array implementation of the List interface. Size can be dynamically changed.
What are generics? What is the diamond operator ( <> )?
Generics allow classes and methods to operate on objects of various types while providing compile-time type safety. The diamond operator (<>) is used for type inference in Java generics, introduced in Java 7.

Difference between HashTable and HashMap?

Hashtable: Synchronized, does not allow null keys or values.
HashMap: Not synchronized, allows one null key and multiple null values.
Difference between ArrayList and Vector?

ArrayList: Not synchronized, resizable array implementation of List.
Vector: Synchronized, resizable array implementation of List (legacy class).
Difference between ArrayList and LinkedList?

ArrayList: Faster for random access and traversal, slower for insertion and deletion in the middle.
LinkedList: Faster for insertion and deletion in the middle, slower for random access.
Difference between TreeSet and HashSet?

TreeSet: Implements the SortedSet interface, maintains elements in sorted order (natural or specified by a comparator).
HashSet: Implements the Set interface, does not maintain any order.
How would you iterate over a Map?
You can iterate over a Map using methods like keySet(), values(), or entrySet() combined with enhanced for loops or iterators.

Which collections cannot hold null values?
Collections like TreeSet, TreeMap, and ConcurrentHashMap cannot hold null values.

What is the base class of all exceptions? What interface do they all implement?
The base class of all exceptions is Throwable. Exceptions implement the Throwable interface.

List some checked and unchecked exceptions?

Checked exceptions: IOException, SQLException, FileNotFoundException, ClassNotFoundException, etc.
Unchecked exceptions: NullPointerException, ArrayIndexOutOfBoundsException, ClassCastException, IllegalArgumentException, etc.
Difference between checked and unchecked exceptions?

Checked exceptions are checked at compile-time and must be handled by the programmer.
Unchecked exceptions are not checked at compile-time and can be ignored or handled at runtime.
Different ways of handling checked exceptions?
Checked exceptions can be handled using try-catch blocks, throwing them to the caller method, or declaring them in the method signature using the throws clause.

What is try-with-resources? What interface must the resource implement to use this feature?
Try-with-resources is a feature introduced in Java 7 for automatically closing resources after they are no longer needed. The resource must implement the AutoCloseable or Closeable interface.

Difference between final, .finalize(), and finally?

final: final is a keyword used in Java to define constants, prevent method overriding, and make a class immutable.
.finalize(): finalize() is a method defined in the Object class. It's called by the garbage collector before reclaiming the memory occupied by an object.
finally: finally is a block used in exception handling. It always executes, whether an exception is thrown or not, and is typically used for cleanup operations like closing resources.
throw vs throws vs Throwable?

throw: Used to manually throw an exception within a method.
throws: Used in method declarations to indicate that the method may throw certain types of exceptions.
Throwable: The superclass of all errors and exceptions in Java.
Do you need a catch block? Can have more than 1? Order of them?

You don't always need a catch block, but if a method throws a checked exception, you must handle it.
Yes, you can have multiple catch blocks to handle different types of exceptions.
The order of catch blocks matters. Catch blocks should be ordered from most specific to most general.
Multi-catch block - can you catch more than one exception in a single catch block?

Yes, Java allows catching multiple exceptions in a single catch block using a multi-catch syntax introduced in Java 7. For example:
java
Copy code
try {
    // code that may throw exceptions
} catch (IOException | SQLException e) {
    // handle both IOException and SQLException
}
Functional interfaces?

Functional interfaces are interfaces that contain only one abstract method (SAM - Single Abstract Method).
They can have multiple default or static methods.
Functional interfaces are used to implement lambda expressions and method references.
Lambdas in Java?

Lambdas are a feature introduced in Java 8 that allow you to treat functionality as a method argument, or to create anonymous functions.
They provide a concise way to express instances of single-method interfaces (functional interfaces).
What is the Streams API?

The Streams API is a new feature introduced in Java 8 to work with collections of objects.
It provides a way to process elements of collections in a functional style with fluent API and supports parallel processing.
Difference between intermediate and terminal operations in Streams API?

Intermediate operations are operations that transform or filter the elements of a stream. They produce a new stream as output.
Terminal operations are operations that produce a non-stream result, such as a value or a side effect. They trigger the processing of the stream.
Has context menu?
It seems like an incomplete question. Context menu typically refers to the menu that appears when you right-click on an object in a graphical user interface (GUI). In the context of Java programming, context menus might be used in GUI frameworks like JavaFX or Swing. If you provide more context, I can provide a more specific answer.